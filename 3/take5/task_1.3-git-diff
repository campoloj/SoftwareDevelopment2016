diff --git a/2/take5/Assignment_2.py b/2/take5/Assignment_2.py
index ae9d375..cfbeb6d 100644
--- a/2/take5/Assignment_2.py
+++ b/2/take5/Assignment_2.py
@@ -9,6 +9,7 @@ from player import Player
 
 deck_size = 210
 max_stack_cards = 6
+initial_hand_size = 9
 
 """
 Data Definitions necessary for representing the components of a 6 Nimmit! game
@@ -49,15 +50,15 @@ class Dealer(object):
 
     def deal(self):
         """
-        Transfers 10 cards to each player's hand from the deck
+        Transfers set number of cards to each player's hand from the deck
         """
         for player in self.list_of_players:
             player.hand = []
         for x in range(self.starting_player, self.starting_player + len(self.list_of_players)):
             player_index = x % len(self.list_of_players)
-            cards_dealt = self.deck[0:10]
+            cards_dealt = self.deck[0:initial_hand_size]
             self.list_of_players[player_index].hand += cards_dealt
-            self.deck = self.deck[10:len(self.deck)]
+            self.deck = self.deck[initial_hand_size:len(self.deck)]
 
     def create_stack(self, card):
         """
@@ -192,9 +193,9 @@ def main(n, bull_range=(2, 7), starting_player=0):
     starting_player = int(starting_player)
     if isinstance(bull_range, basestring):
         bull_range = (int(bull_range), int(bull_range))
-    if n > deck_size / 10:
+    if n > deck_size / initial_hand_size:
         raise RuntimeError("Not enough cards in deck for %d players! Select less than %d players."
-                           % (n, deck_size / 10))
+                           % (n, deck_size / initial_hand_size))
     if starting_player >= n:
         raise RuntimeError("There is no player %d" % starting_player)
     players = []
@@ -212,6 +213,6 @@ if __name__ == "__main__":
         raise RuntimeError("Too many args given, main only accepts number of players (n), bull point value")
     elif len(args) < 4:
         raise RuntimeError("Must supply number of players between 1 and %d, bull point range and the "
-                           "starting player to main" % ((deck_size - 4) / 10))
+                           "starting player to main" % ((deck_size - 4) / initial_hand_size))
     elif len(args) == 4:
         main(args[1], args[2], args[3])
