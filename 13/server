#! /usr/bin/env python

import SocketServer
import json
import threading
from player_proxy import Player_Proxy
import time
from dealer.dealer import Dealer
from dealer.globals import *
from convert import *

player_proxies = []
started = False

def main():
    # Port 0 means to select an arbitrary unused port
    global start_time
    print "MAIN STARTED"
    HOST, PORT = "localhost", 9997

    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
    ip, port = server.server_address

    # Start a thread with the server -- that thread will then start one
    # more thread for each request
    server_thread = threading.Thread(target=server.serve_forever)
    # Exit the server thread when the main thread terminates
    server_thread.daemon = True
    start_time = time.time()
    server_thread.run()

    server.shutdown()


def start_game():
    global started, player_proxies
    if started:
        return
    started = True

    dealer = Dealer.create_initial(player_proxies)
    result = dealer.run_game()

    for proxy in player_proxies:
        proxy.handler.request.sendall(result)
    print result

    started = False


class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):

    def handle(self):
        global PROXY_ID, player_proxies, start_time
        buffer = ""
        decoded_json = []
        while not decoded_json:
            buffer += self.request.recv(1024).strip()
            (decoded_json, buffer) = Convert.json_parser(buffer)
        if decoded_json[0] == "sign-up":
            self.request.sendall("ok")

            player_proxies.append(Player_Proxy(PROXY_ID, self))
            PROXY_ID += 1
            if len(player_proxies) == 8:
                start_game()

            while time.time() - start_time < 30:
                continue

            start_game()

            while started:
                continue


class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass


if __name__ == "__main__":
    main()
